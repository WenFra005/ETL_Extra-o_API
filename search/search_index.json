{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ETL Extract API","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o oficial do ETL Extract API!</p>"},{"location":"#visao-geral","title":"\ud83d\ude80 Vis\u00e3o Geral","text":"<p>O ETL Extract API \u00e9 um sistema completo para extra\u00e7\u00e3o, transforma\u00e7\u00e3o, carga e visualiza\u00e7\u00e3o de dados de cota\u00e7\u00e3o do d\u00f3lar (USD-BRL). Ele automatiza a coleta de dados de APIs externas, processa e armazena em banco de dados, e oferece um dashboard interativo para an\u00e1lise.</p>"},{"location":"#objetivos","title":"\ud83c\udfaf Objetivos","text":"<ul> <li>Automatizar o monitoramento da cota\u00e7\u00e3o do d\u00f3lar</li> <li>Disponibilizar dados hist\u00f3ricos e em tempo real</li> <li>Facilitar a an\u00e1lise e visualiza\u00e7\u00e3o dos dados</li> <li>Servir como base para estudos, integra\u00e7\u00f5es e aplica\u00e7\u00f5es financeiras</li> </ul>"},{"location":"#principais-funcionalidades","title":"\ud83d\udd11 Principais Funcionalidades","text":"<ul> <li>Pipeline ETL agendado (dias \u00fateis, 08:00-19:00)</li> <li>Health checks para monitoramento dos servi\u00e7os</li> <li>Dashboard interativo com filtros de per\u00edodo</li> <li>Armazenamento seguro em PostgreSQL</li> <li>Deploy f\u00e1cil na nuvem (Render, Streamlit Cloud)</li> </ul>"},{"location":"#arquitetura-do-projeto","title":"\ud83c\udfd7\ufe0f Arquitetura do Projeto","text":"<pre><code>graph TD\n    A[API Externa] --&gt; B[Extract]\n    B --&gt; C[Transform]\n    C --&gt; D[Load]\n    D --&gt; E[PostgreSQL]\n    E --&gt; F[Dashboard]\n    H[Scheduler] --&gt; B\n    I[Health Check] --&gt; G[API REST]</code></pre>"},{"location":"#estrutura-do-projeto","title":"\ud83d\udcc1 Estrutura do Projeto","text":"<pre><code>ETL_Extract_API/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 api/                 # Endpoints da API REST\n\u2502   \u2502   \u251c\u2500\u2500 health_api.py    # Health check\n\u2502   \u2502   \u2514\u2500\u2500 pipeline_web.py  # Pipeline como web service\n\u2502   \u251c\u2500\u2500 dashboard/           # Interface de visualiza\u00e7\u00e3o\n\u2502   \u2502   \u2514\u2500\u2500 dashboard.py     # Dashboard Streamlit\n\u2502   \u251c\u2500\u2500 pipeline/            # Pipeline ETL\n\u2502   \u2502   \u251c\u2500\u2500 extract.py       # Extra\u00e7\u00e3o de dados\n\u2502   \u2502   \u251c\u2500\u2500 transform.py     # Transforma\u00e7\u00e3o\n\u2502   \u2502   \u2514\u2500\u2500 load.py          # Carga no banco\n\u2502   \u251c\u2500\u2500 database/            # Camada de dados\n\u2502   \u2502   \u2514\u2500\u2500 database.py      # Modelos ORM\n\u2502   \u251c\u2500\u2500 config/              # Configura\u00e7\u00f5es\n\u2502   \u2502   \u2514\u2500\u2500 config.py        # Vari\u00e1veis de ambiente\n\u2502   \u2514\u2500\u2500 main.py              # Execu\u00e7\u00e3o local do pipeline\n\u251c\u2500\u2500 docs/                    # Documenta\u00e7\u00e3o\n\u251c\u2500\u2500 requirements.txt         # Depend\u00eancias Python\n\u2514\u2500\u2500 README.md               # Documenta\u00e7\u00e3o Principal\n</code></pre>"},{"location":"#comecando","title":"\ud83d\ude80 Come\u00e7ando","text":"<ol> <li>Configura\u00e7\u00e3o - Configure vari\u00e1veis de ambiente</li> <li>API - Explore os endpoints de health check</li> <li>Dashboard - Use a interface visual</li> <li>Pipeline ETL - Entenda o fluxo de dados</li> </ol>"},{"location":"#status-do-projeto","title":"\ud83d\udcc8 Status do Projeto","text":"<ul> <li>\u2705 Pipeline ETL funcionando</li> <li>\u2705 Health checks implementados</li> <li>\u2705 Dashboard interativo</li> <li>\u2705 Deploy na nuvem</li> <li>\u2705 Documenta\u00e7\u00e3o completa</li> </ul> <p>Acesse as se\u00e7\u00f5es ao lado para detalhes sobre cada parte do sistema! </p>"},{"location":"api/","title":"API","text":"<p>A API do ETL Extract API permite verificar a sa\u00fade dos servi\u00e7os e monitorar o status do sistema.</p>"},{"location":"api/#endpoints-disponiveis","title":"Endpoints Dispon\u00edveis","text":""},{"location":"api/#health","title":"<code>/health</code>","text":"<ul> <li>M\u00e9todo: GET</li> <li>Descri\u00e7\u00e3o: Verifica se o servi\u00e7o de health check est\u00e1 online.</li> <li>Resposta: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></li> </ul>"},{"location":"api/#health-pipeline","title":"<code>/health-pipeline</code>","text":"<ul> <li>M\u00e9todo: GET</li> <li>Descri\u00e7\u00e3o: Verifica se o servi\u00e7o de pipeline est\u00e1 online e funcionando.</li> <li>Resposta: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></li> </ul>"},{"location":"api/#exemplos-de-uso","title":"Exemplos de Uso","text":"<pre><code># Health check do servi\u00e7o principal\ncurl https://seuservico.onrender.com/health\n\n# Health check do pipeline\ncurl https://seuservico.onrender.com/health-pipeline\n</code></pre>"},{"location":"api/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>Todos os endpoints retornam JSON.</li> <li>Os health checks podem ser usados para monitoramento autom\u00e1tico.</li> <li>O pipeline executa automaticamente em background conforme agendamento configurado.</li> <li>N\u00e3o h\u00e1 endpoints para execu\u00e7\u00e3o manual do pipeline ou consulta de dados. </li> </ul>"},{"location":"config/","title":"Configura\u00e7\u00e3o","text":"<p>A configura\u00e7\u00e3o do ETL Extract API \u00e9 feita principalmente por vari\u00e1veis de ambiente e arquivos de configura\u00e7\u00e3o Python.</p>"},{"location":"config/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<p>As principais vari\u00e1veis necess\u00e1rias s\u00e3o:</p> Vari\u00e1vel Descri\u00e7\u00e3o POSTGRES_USER Usu\u00e1rio do banco PostgreSQL POSTGRES_PASSWORD Senha do banco PostgreSQL POSTGRES_HOST Host do banco PostgreSQL POSTGRES_PORT Porta do banco PostgreSQL POSTGRES_DB Nome do banco de dados TOKEN_AWESOMEAPI Token de acesso \u00e0 API de cota\u00e7\u00e3o <p>Exemplo de <code>.env</code>: <pre><code>POSTGRES_USER=seu_usuario\nPOSTGRES_PASSWORD=sua_senha\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=etl_dolar\nTOKEN_AWESOMEAPI=seu_token\n</code></pre></p>"},{"location":"config/#arquivos-de-configuracao","title":"Arquivos de Configura\u00e7\u00e3o","text":"<ul> <li>O arquivo <code>src/config/config.py</code> centraliza a leitura das vari\u00e1veis de ambiente e configura\u00e7\u00f5es do sistema.</li> <li>O dashboard pode usar um arquivo <code>.streamlit/secrets.toml</code> para deploy no Streamlit Cloud.</li> </ul>"},{"location":"config/#deploy-no-render","title":"Deploy no Render","text":""},{"location":"config/#configuracao-do-pipeline","title":"Configura\u00e7\u00e3o do Pipeline","text":"<ul> <li>Build Command: <code>pip install -r requirements.txt</code></li> <li>Start Command: <code>gunicorn -w 1 -b 0.0.0.0:$PORT api.pipeline_web:app</code></li> <li>Health Check: <code>/health-pipeline</code></li> </ul>"},{"location":"config/#configuracao-do-dashboard","title":"Configura\u00e7\u00e3o do Dashboard","text":"<ul> <li>Build Command: <code>pip install -r requirements.txt</code></li> <li>Start Command: <code>streamlit run src/dashboard/dashboard.py --server.port $PORT --server.address 0.0.0.0</code></li> <li>Health Check: Autom\u00e1tico pelo Streamlit</li> </ul>"},{"location":"config/#configuracao-do-health-api","title":"Configura\u00e7\u00e3o do Health API","text":"<ul> <li>Build Command: <code>pip install -r requirements.txt</code></li> <li>Start Command: <code>gunicorn -w 1 -b 0.0.0.0:$PORT api.health_api:app</code></li> <li>Health Check: <code>/health</code></li> </ul>"},{"location":"config/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>Nunca exponha suas credenciais em reposit\u00f3rios p\u00fablicos.</li> <li>Use arquivos <code>.env</code> para facilitar o desenvolvimento local.</li> <li>No Render, configure as vari\u00e1veis pelo painel web.</li> <li>O pipeline executa automaticamente em background quando deployado como servi\u00e7o. </li> </ul>"},{"location":"dashboard/","title":"Dashboard","text":"<p>O dashboard do ETL Extract API permite visualizar e analisar a cota\u00e7\u00e3o do d\u00f3lar de forma interativa e intuitiva.</p>"},{"location":"dashboard/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Visualiza\u00e7\u00e3o em tempo real dos dados de cota\u00e7\u00e3o</li> <li>Filtros de per\u00edodo: hora, dia, semana, m\u00eas, todos os dados</li> <li>Gr\u00e1fico de linha da evolu\u00e7\u00e3o do d\u00f3lar</li> <li>Tabela de dados recentes</li> <li>M\u00e9tricas estat\u00edsticas: pre\u00e7o atual, m\u00e1ximo, m\u00ednimo</li> </ul>"},{"location":"dashboard/#como-acessar","title":"Como acessar","text":"<ul> <li>O dashboard pode ser acessado via navegador, em um link p\u00fablico (ex: Render ou Streamlit Cloud)</li> <li>Exemplo: <code>https://seuprojeto.onrender.com</code></li> </ul>"},{"location":"dashboard/#filtros-de-periodo","title":"Filtros de Per\u00edodo","text":"<ul> <li>\u00daltima Hora: Mostra apenas as cota\u00e7\u00f5es da \u00faltima hora</li> <li>\u00daltimo Dia: Mostra as cota\u00e7\u00f5es das \u00faltimas 24 horas</li> <li>\u00daltima Semana: Mostra os dados dos \u00faltimos 7 dias</li> <li>\u00daltimo M\u00eas: Mostra os dados dos \u00faltimos 30 dias</li> <li>Todos os Dados: Mostra todo o hist\u00f3rico dispon\u00edvel</li> </ul>"},{"location":"dashboard/#interface-interativa","title":"Interface Interativa","text":"<ul> <li>Bot\u00f5es de zoom organizados horizontalmente</li> <li>Estado persistente - O per\u00edodo selecionado \u00e9 mantido</li> <li>Atualiza\u00e7\u00e3o din\u00e2mica - Tabela, gr\u00e1fico e m\u00e9tricas s\u00e3o atualizados automaticamente</li> <li>Indicador visual - Mostra qual per\u00edodo est\u00e1 ativo</li> </ul>"},{"location":"dashboard/#graficos-e-tabelas","title":"Gr\u00e1ficos e Tabelas","text":"<ul> <li>O gr\u00e1fico de linha mostra a evolu\u00e7\u00e3o do valor de compra do d\u00f3lar ao longo do tempo</li> <li>A tabela exibe os dados brutos mais recentes</li> <li>As m\u00e9tricas mostram o pre\u00e7o atual, m\u00e1ximo e m\u00ednimo do per\u00edodo selecionado</li> </ul>"},{"location":"dashboard/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>O dashboard \u00e9 atualizado automaticamente conforme novos dados s\u00e3o inseridos</li> <li>N\u00e3o \u00e9 necess\u00e1rio login para acessar (padr\u00e3o p\u00fablico)</li> <li>Pode ser customizado para outros tipos de visualiza\u00e7\u00e3o</li> <li>Execu\u00e7\u00e3o via <code>streamlit run src/dashboard/dashboard.py</code> </li> </ul>"},{"location":"database/","title":"Banco de Dados","text":"<p>O sistema utiliza o banco de dados PostgreSQL para armazenar de forma segura e estruturada as cota\u00e7\u00f5es do d\u00f3lar.</p>"},{"location":"database/#modelo-de-dados","title":"Modelo de Dados","text":"<p>A tabela principal \u00e9 <code>dolar_data</code>, definida via SQLAlchemy ORM.</p>"},{"location":"database/#estrutura-da-tabela","title":"Estrutura da Tabela","text":"Campo Tipo Descri\u00e7\u00e3o id Integer Chave prim\u00e1ria moeda_origem String(3) Moeda de origem (ex: USD) moeda_destino String(3) Moeda de destino (ex: BRL) valor_de_compra Float Valor de compra do d\u00f3lar timestamp_moeda DateTime Data/hora da cota\u00e7\u00e3o timestamp_criacao DateTime Data/hora de inser\u00e7\u00e3o no sistema"},{"location":"database/#exemplo-de-query","title":"Exemplo de Query","text":"<pre><code>-- Consulta das cota\u00e7\u00f5es mais recentes\nSELECT * FROM dolar_data \nWHERE moeda_origem = 'USD' AND moeda_destino = 'BRL' \nORDER BY timestamp_moeda DESC \nLIMIT 10;\n\n-- Consulta por per\u00edodo\nSELECT * FROM dolar_data \nWHERE timestamp_moeda &gt;= '2024-05-01' \nAND timestamp_moeda &lt;= '2024-05-31'\nORDER BY timestamp_moeda DESC;\n\n-- Estat\u00edsticas b\u00e1sicas\nSELECT \n    MIN(valor_de_compra) as preco_minimo,\n    MAX(valor_de_compra) as preco_maximo,\n    AVG(valor_de_compra) as preco_medio\nFROM dolar_data \nWHERE moeda_origem = 'USD' AND moeda_destino = 'BRL';\n</code></pre>"},{"location":"database/#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li>O modelo est\u00e1 definido em <code>src/database/database.py</code></li> <li>A conex\u00e3o \u00e9 configurada em <code>src/config/config.py</code></li> <li>As tabelas s\u00e3o criadas automaticamente pelo SQLAlchemy</li> </ul>"},{"location":"database/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>O banco pode ser acessado por qualquer ferramenta compat\u00edvel com PostgreSQL</li> <li>Novas tabelas podem ser adicionadas conforme a necessidade</li> <li>Os dados s\u00e3o inseridos automaticamente pelo pipeline ETL</li> <li>Backup regular \u00e9 recomendado para dados de produ\u00e7\u00e3o </li> </ul>"},{"location":"pipeline/","title":"Pipeline ETL","text":"<p>O pipeline ETL (Extract, Transform, Load) \u00e9 o n\u00facleo do sistema, respons\u00e1vel por coletar, processar e armazenar os dados de cota\u00e7\u00e3o do d\u00f3lar.</p>"},{"location":"pipeline/#fluxo-do-pipeline","title":"Fluxo do Pipeline","text":"<ol> <li>Extra\u00e7\u00e3o</li> <li>Coleta dados de APIs externas de cota\u00e7\u00e3o do d\u00f3lar</li> <li>Executa apenas em dias \u00fateis, das 08:00 \u00e0s 19:00 (hor\u00e1rio de Bras\u00edlia)</li> <li>Transforma\u00e7\u00e3o</li> <li>Valida e padroniza os dados recebidos</li> <li>Converte formatos de data/hora e valores</li> <li>Carga</li> <li>Insere os dados processados no banco PostgreSQL</li> <li>Garante integridade e evita duplicidades</li> </ol>"},{"location":"pipeline/#agendamento-e-controle-de-horario","title":"Agendamento e Controle de Hor\u00e1rio","text":"<ul> <li>O pipeline roda automaticamente em loop, respeitando a janela de hor\u00e1rio configurada</li> <li>Hor\u00e1rio permitido: Segunda a sexta-feira, das 08:00 \u00e0s 19:00 (hor\u00e1rio de Bras\u00edlia)</li> <li>Fora do hor\u00e1rio: Apenas logs informativos s\u00e3o gerados a cada 10 minutos</li> <li>Fins de semana: N\u00e3o executa (s\u00e1bados e domingos)</li> </ul>"},{"location":"pipeline/#execucao-em-background","title":"Execu\u00e7\u00e3o em Background","text":"<ul> <li>O pipeline pode ser executado como servi\u00e7o web no Render</li> <li>Roda em thread separada para n\u00e3o bloquear o servi\u00e7o</li> <li>Health check dispon\u00edvel para monitoramento</li> </ul>"},{"location":"pipeline/#logs-e-monitoramento","title":"Logs e Monitoramento","text":"<ul> <li>Todos os passos do pipeline s\u00e3o registrados em logs estruturados</li> <li>Erros e exce\u00e7\u00f5es s\u00e3o tratados e logados</li> <li>Logs podem ser visualizados no console ou em sistemas externos</li> </ul>"},{"location":"pipeline/#exemplo-de-fluxo","title":"Exemplo de Fluxo","text":"<pre><code>graph TD\n    A[API Externa] --&gt; B[Extract]\n    B --&gt; C[Transform]\n    C --&gt; D[Load]\n    D --&gt; E[PostgreSQL]\n    H[Scheduler] --&gt; B</code></pre>"},{"location":"pipeline/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>O pipeline \u00e9 modular e pode ser adaptado para outras moedas ou fontes de dados</li> <li>O c\u00f3digo est\u00e1 em <code>src/pipeline/</code></li> <li>Execu\u00e7\u00e3o local via <code>python src/main.py</code></li> <li>Execu\u00e7\u00e3o como servi\u00e7o via <code>src/api/pipeline_web.py</code> </li> </ul>"},{"location":"referencia/","title":"\ud83d\udcda Refer\u00eancia da API Python","text":"<p>Esta p\u00e1gina cont\u00e9m a documenta\u00e7\u00e3o t\u00e9cnica completa de todas as fun\u00e7\u00f5es, classes e m\u00f3dulos do projeto ETL Extract API.</p>"},{"location":"referencia/#modulo-principal","title":"\ud83d\ude80 M\u00f3dulo Principal","text":""},{"location":"referencia/#src.main","title":"<code>src.main</code>","text":"<p>M\u00f3dulo principal para execu\u00e7\u00e3o do pipeline ETL de cota\u00e7\u00e3o do d\u00f3lar (USD-BRL).</p> <p>Este script inicializa o ambiente, cria as tabelas e executa o pipeline de extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carga de dados de cota\u00e7\u00e3o do d\u00f3lar.</p> <p>O pipeline executa automaticamente em hor\u00e1rios espec\u00edficos (08:00-19:00, dias \u00fateis) e pode ser interrompido via SIGTERM ou Ctrl+C.</p>"},{"location":"referencia/#src.main.create_tables","title":"<code>create_tables(engine, logger)</code>","text":"<p>Cria as tabelas no banco de dados PostgreSQL usando SQLAlchemy.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>Objeto engine do SQLAlchemy configurado para PostgreSQL.</p> required <code>logger</code> <code>Logger</code> <p>Logger para registrar logs do processo.</p> required Source code in <code>src/main.py</code> <pre><code>def create_tables(engine, logger):\n    \"\"\"Cria as tabelas no banco de dados PostgreSQL usando SQLAlchemy.\n\n    Parameters\n    ----------\n    engine : sqlalchemy.engine.Engine\n        Objeto engine do SQLAlchemy configurado para PostgreSQL.\n    logger : logging.Logger\n        Logger para registrar logs do processo.\n    \"\"\"\n    Base.metadata.create_all(engine)\n    logger.info(\"Tabelas criadas/verificadas com sucesso.\")\n</code></pre>"},{"location":"referencia/#src.main.handle_sigterm","title":"<code>handle_sigterm(_signum, _frame)</code>","text":"<p>Gerencia o sinal de t\u00e9rmino (SIGTERM) para encerrar o pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>_signum</code> <code>int</code> <p>O n\u00famero do sinal recebido.</p> required <code>_frame</code> <code>frame</code> <p>O frame atual do programa.</p> required Source code in <code>src/main.py</code> <pre><code>def handle_sigterm(_signum, _frame):\n    \"\"\"Gerencia o sinal de t\u00e9rmino (SIGTERM) para encerrar o pipeline.\n\n    Parameters\n    ----------\n    _signum : int\n        O n\u00famero do sinal recebido.\n    _frame : frame\n        O frame atual do programa.\n    \"\"\"\n    logger.info(\"Recebido sinal de t\u00e9rmino (SIGTERM). Encerrando o pipeline...\")\n    stop_event.set()\n</code></pre>"},{"location":"referencia/#src.main.is_db_empty","title":"<code>is_db_empty(Session)</code>","text":"<p>Verifica se o banco de dados est\u00e1 vazio. Esta fun\u00e7\u00e3o consulta a tabela DolarData para verificar se n\u00e3o h\u00e1 registros.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <code>Session</code> <p>Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True se o banco de dados estiver vazio (sem registros na tabela DolarData), False caso contr\u00e1rio.</p> Source code in <code>src/main.py</code> <pre><code>def is_db_empty(Session):\n    \"\"\"\n    Verifica se o banco de dados est\u00e1 vazio.\n    Esta fun\u00e7\u00e3o consulta a tabela DolarData para verificar se n\u00e3o h\u00e1 registros.\n\n\n    Parameters\n    ----------\n    Session : sqlalchemy.orm.session.Session\n        Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.\n\n    Returns\n    -------\n    bool\n        True se o banco de dados estiver vazio (sem registros na tabela DolarData),\n        False caso contr\u00e1rio.\n    \"\"\"\n    session = Session()\n    try:\n        count = session.query(DolarData).count()\n        return count == 0\n    finally:\n        session.close()\n</code></pre>"},{"location":"referencia/#src.main.is_within_allowed_time","title":"<code>is_within_allowed_time()</code>","text":"<p>Verifica se o hor\u00e1rio atual est\u00e1 dentro do intervalo permitido para execu\u00e7\u00e3o.</p> <p>O intervalo permitido \u00e9 de segunda a sexta-feira, das 08:00 \u00e0s 19:00 (hor\u00e1rio de S\u00e3o Paulo).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True se o hor\u00e1rio atual estiver dentro do intervalo permitido, False caso contr\u00e1rio.</p> Source code in <code>src/main.py</code> <pre><code>def is_within_allowed_time():\n    \"\"\"Verifica se o hor\u00e1rio atual est\u00e1 dentro do intervalo permitido para execu\u00e7\u00e3o.\n\n    O intervalo permitido \u00e9 de segunda a sexta-feira, das 08:00 \u00e0s 19:00\n    (hor\u00e1rio de S\u00e3o Paulo).\n\n    Returns\n    -------\n    bool\n        True se o hor\u00e1rio atual estiver dentro do intervalo permitido,\n        False caso contr\u00e1rio.\n    \"\"\"\n    now = datetime.datetime.now(ZoneInfo(\"America/Sao_Paulo\"))\n    # Verifica se \u00e9 fim de semana (5 = s\u00e1bado, 6 = domingo)\n    if now.weekday() &gt;= 5:\n        return False\n    start = now.replace(hour=8, minute=0, second=0, microsecond=0)\n    end = now.replace(hour=19, minute=0, second=0, microsecond=0)\n    return start &lt;= now &lt;= end\n</code></pre>"},{"location":"referencia/#src.main.loop_pipeline","title":"<code>loop_pipeline(Session, logger)</code>","text":"<p>Executa o pipeline em loop cont\u00ednuo com controle de hor\u00e1rio.</p> <p>O pipeline executa apenas dentro do hor\u00e1rio permitido (08:00-19:00, dias \u00fateis). Fora do hor\u00e1rio, aguarda e faz logs informativos.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <code>Session</code> <p>Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.</p> required <code>logger</code> <code>Logger</code> <p>Logger para registrar logs do pipeline.</p> required Source code in <code>src/main.py</code> <pre><code>def loop_pipeline(Session, logger):\n    \"\"\"Executa o pipeline em loop cont\u00ednuo com controle de hor\u00e1rio.\n\n    O pipeline executa apenas dentro do hor\u00e1rio permitido (08:00-19:00, dias \u00fateis).\n    Fora do hor\u00e1rio, aguarda e faz logs informativos.\n\n    Parameters\n    ----------\n    Session : sqlalchemy.orm.session.Session\n        Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.\n    logger : logging.Logger\n        Logger para registrar logs do pipeline.\n    \"\"\"\n    while not stop_event.is_set():\n        if is_within_allowed_time():\n            with logfire.span(\"Executando o pipeline\"):\n                try:\n                    pipeline(Session, logger)\n                    logger.info(\"Aguardando 30 segundos para a pr\u00f3xima execu\u00e7\u00e3o...\")\n                    stop_event.wait(30)\n                except Exception as e:\n                    logger.error(f\"Ocorreu um erro inesperado: {e}\")\n                    time.sleep(30)\n            logger.info(\"Pipeline finalizado.\")\n        else:\n            time_remaining = time_until_next_start()\n            minutes, seconds = divmod(time_remaining.seconds, 60)\n            hours, minutes = divmod(minutes, 60)\n            logger.info(\n                f\"Fora do hor\u00e1rio permitido (08:00-19:00). \"\n                f\"Tempo restante at\u00e9 o pr\u00f3ximo in\u00edcio: {hours:02d}:{minutes:02d}:{seconds:02d}. \"\n                f\"Checando novamente em 10 minutos...\"\n            )\n            stop_event.wait(600)  # 10 minutos\n    logger.info(\"Execu\u00e7\u00e3o encerrada.\")\n</code></pre>"},{"location":"referencia/#src.main.pipeline","title":"<code>pipeline(Session, logger)</code>","text":"<p>Executa o pipeline ETL de cota\u00e7\u00e3o do d\u00f3lar (USD-BRL). O pipeline verifica se o banco de dados est\u00e1 vazio. Se estiver, realiza uma carga hist\u00f3rica inicial dos \u00faltimos 3 meses. Caso contr\u00e1rio, executa o pipeline normal de extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carga.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <code>Session</code> <p>Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.</p> required <code>logger</code> <code>Logger</code> <p>Logger para registrar logs do processo de ETL.</p> required Source code in <code>src/main.py</code> <pre><code>def pipeline(Session, logger):\n    \"\"\"\n    Executa o pipeline ETL de cota\u00e7\u00e3o do d\u00f3lar (USD-BRL).\n    O pipeline verifica se o banco de dados est\u00e1 vazio. Se estiver, realiza uma carga hist\u00f3rica\n    inicial dos \u00faltimos 3 meses. Caso contr\u00e1rio, executa o pipeline normal de extra\u00e7\u00e3o,\n    transforma\u00e7\u00e3o e carga.\n\n    Parameters\n    ----------\n    Session : sqlalchemy.orm.session.Session\n        Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.\n    logger : logging.Logger\n        Logger para registrar logs do processo de ETL.\n    \"\"\"\n    if is_db_empty(Session):\n        with logfire.span(\"Carga hist\u00f3rica inicial\"):\n            logger.info(\n                \"Banco de dados vazio. Extraindo hist\u00f3rico dos \u00faltimos 3 meses...\"\n            )\n            with logfire.span(\"Extraindo dados hist\u00f3ricos\"):\n                data_hist = extract_historical_data(logger, days=90)\n            if not data_hist:\n                logger.error(\n                    \"Falha ao extrair dados hist\u00f3ricos. Encerrando o pipeline.\"\n                )\n                return\n            with logfire.span(\"Transformando dados hist\u00f3ricos\"):\n                transformed_list = transform_historical_data(data_hist)\n            with logfire.span(\"Salvando dados hist\u00f3ricos no PostgreSQL\"):\n                for item in transformed_list:\n                    save_data_postgres(Session, item, logger)\n            logger.info(\"Carga hist\u00f3rica conclu\u00edda com sucesso.\")\n        return\n    # Pipeline normal\n    with logfire.span(\"Extraindo dados\"):\n        data = extract_data(logger)\n    if not data:\n        logger.error(\"Nenhum dado foi extra\u00eddo. Encerrando o pipeline.\")\n        return\n    with logfire.span(\"Transformando dados\"):\n        transformed_data = transform_data(data)\n    with logfire.span(\"Salvando dados no PostgreSQL\"):\n        save_data_postgres(Session, transformed_data, logger)\n    logger.info(\"Pipeline de dados conclu\u00eddo com sucesso.\")\n</code></pre>"},{"location":"referencia/#src.main.time_until_next_start","title":"<code>time_until_next_start()</code>","text":"<p>Calcula o tempo restante at\u00e9 o pr\u00f3ximo in\u00edcio permitido do pipeline.</p> <p>Considera que o pipeline s\u00f3 pode ser executado de segunda a sexta-feira, das 08:00 \u00e0s 19:00.</p> <p>Returns:</p> Type Description <code>timedelta</code> <p>Tempo restante at\u00e9 o pr\u00f3ximo in\u00edcio permitido.</p> Source code in <code>src/main.py</code> <pre><code>def time_until_next_start():\n    \"\"\"Calcula o tempo restante at\u00e9 o pr\u00f3ximo in\u00edcio permitido do pipeline.\n\n    Considera que o pipeline s\u00f3 pode ser executado de segunda a sexta-feira,\n    das 08:00 \u00e0s 19:00.\n\n    Returns\n    -------\n    datetime.timedelta\n        Tempo restante at\u00e9 o pr\u00f3ximo in\u00edcio permitido.\n    \"\"\"\n    now = datetime.datetime.now(ZoneInfo(\"America/Sao_Paulo\"))\n    next_start = now.replace(hour=8, minute=0, second=0, microsecond=0)\n\n    # Se j\u00e1 passou das 8h hoje, vai para o pr\u00f3ximo dia\n    if now &gt;= next_start:\n        next_start = next_start + datetime.timedelta(days=1)\n\n    # Pula s\u00e1bados e domingos\n    while next_start.weekday() &gt;= 5:  # 5 = s\u00e1bado, 6 = domingo\n        next_start = next_start + datetime.timedelta(days=1)\n\n    return next_start - now\n</code></pre>"},{"location":"referencia/#pipeline-etl","title":"\ud83d\udd04 Pipeline ETL","text":""},{"location":"referencia/#src.pipeline.extract","title":"<code>src.pipeline.extract</code>","text":"<p>M\u00f3dulo respons\u00e1vel pela extra\u00e7\u00e3o de dados da cota\u00e7\u00e3o do d\u00f3lar (USD-BRL) via API.</p> <p>Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para conectar com APIs externas de cota\u00e7\u00e3o de moedas e extrair dados atualizados do d\u00f3lar em rela\u00e7\u00e3o ao real brasileiro.</p>"},{"location":"referencia/#src.pipeline.extract.extract_data","title":"<code>extract_data(logger)</code>","text":"<p>Extrai dados da API AwesomeAPI para obter a cota\u00e7\u00e3o do d\u00f3lar (USD-BRL).</p> <p>Faz uma requisi\u00e7\u00e3o HTTP para a API AwesomeAPI para obter dados atualizados da cota\u00e7\u00e3o do d\u00f3lar em rela\u00e7\u00e3o ao real brasileiro.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger para registrar logs do processo de extra\u00e7\u00e3o.</p> required <p>Returns:</p> Type Description <code>dict or None</code> <p>Dicion\u00e1rio contendo os dados extra\u00eddos da API, ou None se houver erro.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = extract_data(logger)\n&gt;&gt;&gt; if data:\n...     print(f\"USD-BRL: {data['USDBRL']['bid']}\")\n</code></pre> Source code in <code>src/pipeline/extract.py</code> <pre><code>def extract_data(logger):\n    \"\"\"\n    Extrai dados da API AwesomeAPI para obter a cota\u00e7\u00e3o do d\u00f3lar (USD-BRL).\n\n    Faz uma requisi\u00e7\u00e3o HTTP para a API AwesomeAPI para obter dados atualizados\n    da cota\u00e7\u00e3o do d\u00f3lar em rela\u00e7\u00e3o ao real brasileiro.\n\n    Parameters\n    ----------\n    logger : logging.Logger\n        Logger para registrar logs do processo de extra\u00e7\u00e3o.\n\n    Returns\n    -------\n    dict or None\n        Dicion\u00e1rio contendo os dados extra\u00eddos da API, ou None se houver erro.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = extract_data(logger)\n    &gt;&gt;&gt; if data:\n    ...     print(f\"USD-BRL: {data['USDBRL']['bid']}\")\n    \"\"\"\n    url = (\n        f\"https://economia.awesomeapi.com.br/json/last/USD-BRL?token={TOKEN_AWESOMEAPI}\"\n    )\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        logger.error(f\"Erro ao acessar a API: {response.status_code} - {response.text}\")\n        return None\n</code></pre>"},{"location":"referencia/#src.pipeline.extract.extract_historical_data","title":"<code>extract_historical_data(logger, days=90)</code>","text":"<p>Extrai dados hist\u00f3ricos da cota\u00e7\u00e3o do d\u00f3lar (USD-BRL) da API AwesomeAPI. Faz uma requisi\u00e7\u00e3o HTTP para a API AwesomeAPI para obter dados hist\u00f3ricos da cota\u00e7\u00e3o do d\u00f3lar em rela\u00e7\u00e3o ao real brasileiro, limitando a quantidade de dias.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger para registrar logs do processo de extra\u00e7\u00e3o.</p> required <code>days</code> <code>int</code> <p>N\u00famero de dias para extrair dados hist\u00f3ricos com valor m\u00e1ximo de 90 dias, by default 90.</p> <code>90</code> <p>Returns:</p> Type Description <code>list or None</code> <p>Lista de dicion\u00e1rios contendo os dados hist\u00f3ricos extra\u00eddos da API, ou None se houver erro.</p> Source code in <code>src/pipeline/extract.py</code> <pre><code>def extract_historical_data(logger, days=90):\n    \"\"\"\n    Extrai dados hist\u00f3ricos da cota\u00e7\u00e3o do d\u00f3lar (USD-BRL) da API AwesomeAPI.\n    Faz uma requisi\u00e7\u00e3o HTTP para a API AwesomeAPI para obter dados hist\u00f3ricos\n    da cota\u00e7\u00e3o do d\u00f3lar em rela\u00e7\u00e3o ao real brasileiro, limitando a quantidade de dias.\n\n    Parameters\n    ----------\n    logger : logging.Logger\n        Logger para registrar logs do processo de extra\u00e7\u00e3o.\n    days : int, optional\n        N\u00famero de dias para extrair dados hist\u00f3ricos com valor m\u00e1ximo de 90 dias, by default 90.\n\n    Returns\n    -------\n    list or None\n        Lista de dicion\u00e1rios contendo os dados hist\u00f3ricos extra\u00eddos da API,\n        ou None se houver erro.\n    \"\"\"\n    if days &gt; 90:\n        days = 90\n    url = f\"https://economia.awesomeapi.com.br/json/daily/USD-BRL/{days}?token={TOKEN_AWESOMEAPI}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        if isinstance(data, list):\n            return data\n        else:\n            logger.error(\n                f\"Resposta inesperada da API hist\u00f3rica: {data} (esperado uma lista de dicion\u00e1rios).\"\n            )\n            return None\n    else:\n        logger.error(\n            f\"Erro ao acessar a API hist\u00f3rica: {response.status_code} - {response.text}\"\n        )\n</code></pre>"},{"location":"referencia/#src.pipeline.transform","title":"<code>src.pipeline.transform</code>","text":"<p>M\u00f3dulo respons\u00e1vel pela transforma\u00e7\u00e3o dos dados extra\u00eddos da cota\u00e7\u00e3o do d\u00f3lar (USD-BRL).</p> <p>Este m\u00f3dulo processa os dados brutos recebidos da API e os converte para o formato padronizado usado internamente pelo sistema.</p>"},{"location":"referencia/#src.pipeline.transform.transform_data","title":"<code>transform_data(data)</code>","text":"<p>Transforma os dados extra\u00eddos da API para o formato padronizado.</p> <p>Extrai informa\u00e7\u00f5es relevantes dos dados brutos da API e as converte para o formato interno do sistema, incluindo convers\u00e3o de timezone.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dicion\u00e1rio contendo os dados extra\u00eddos da API com a chave \"USDBRL\".</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Dicion\u00e1rio com os dados transformados contendo: - moeda_origem: C\u00f3digo da moeda de origem (USD) - moeda_destino: C\u00f3digo da moeda de destino (BRL) - valor_de_compra: Valor de compra do d\u00f3lar em rela\u00e7\u00e3o ao real - timestamp_moeda: Timestamp da cota\u00e7\u00e3o (timezone S\u00e3o Paulo) - timestamp_criacao: Timestamp de cria\u00e7\u00e3o (timezone S\u00e3o Paulo)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; raw_data = {\"USDBRL\": {\"code\": \"USD\", \"codein\": \"BRL\", \"bid\": \"5.12\", \"timestamp\": \"1640995200\"}}\n&gt;&gt;&gt; transformed = transform_data(raw_data)\n&gt;&gt;&gt; print(transformed[\"valor_de_compra\"])\n5.12\n</code></pre> Source code in <code>src/pipeline/transform.py</code> <pre><code>def transform_data(data):\n    \"\"\"Transforma os dados extra\u00eddos da API para o formato padronizado.\n\n    Extrai informa\u00e7\u00f5es relevantes dos dados brutos da API e as converte para\n    o formato interno do sistema, incluindo convers\u00e3o de timezone.\n\n    Parameters\n    ----------\n    data : dict\n        Dicion\u00e1rio contendo os dados extra\u00eddos da API com a chave \"USDBRL\".\n\n    Returns\n    -------\n    dict\n        Dicion\u00e1rio com os dados transformados contendo:\n        - moeda_origem: C\u00f3digo da moeda de origem (USD)\n        - moeda_destino: C\u00f3digo da moeda de destino (BRL)\n        - valor_de_compra: Valor de compra do d\u00f3lar em rela\u00e7\u00e3o ao real\n        - timestamp_moeda: Timestamp da cota\u00e7\u00e3o (timezone S\u00e3o Paulo)\n        - timestamp_criacao: Timestamp de cria\u00e7\u00e3o (timezone S\u00e3o Paulo)\n\n    Examples\n    --------\n    &gt;&gt;&gt; raw_data = {\"USDBRL\": {\"code\": \"USD\", \"codein\": \"BRL\", \"bid\": \"5.12\", \"timestamp\": \"1640995200\"}}\n    &gt;&gt;&gt; transformed = transform_data(raw_data)\n    &gt;&gt;&gt; print(transformed[\"valor_de_compra\"])\n    5.12\n    \"\"\"\n    moeda_origem = data[\"USDBRL\"][\"code\"]\n    moeda_destino = data[\"USDBRL\"][\"codein\"]\n    valor_de_compra = data[\"USDBRL\"][\"bid\"]\n    timestamp_moeda = datetime.fromtimestamp(\n        int(data[\"USDBRL\"][\"timestamp\"]), tz=UTC\n    ).astimezone(ZoneInfo(\"America/Sao_Paulo\"))\n    timestamp_criacao = datetime.now(UTC).astimezone(ZoneInfo(\"America/Sao_Paulo\"))\n\n    data_transformed = {\n        \"moeda_origem\": moeda_origem,\n        \"moeda_destino\": moeda_destino,\n        \"valor_de_compra\": valor_de_compra,\n        \"timestamp_moeda\": timestamp_moeda,\n        \"timestamp_criacao\": timestamp_criacao,\n    }\n\n    return data_transformed\n</code></pre>"},{"location":"referencia/#src.pipeline.transform.transform_historical_data","title":"<code>transform_historical_data(data_list)</code>","text":"<p>Transforma uma lista de dados hist\u00f3ricos extra\u00eddos da API para o formato padronizado.</p> <p>Parameters:</p> Name Type Description Default <code>data_list</code> <code>list</code> <p>Lista de dicion\u00e1rios contendo dados hist\u00f3ricos extra\u00eddos da API, onde cada dicion\u00e1rio representa uma cota\u00e7\u00e3o do d\u00f3lar.</p> required <p>Returns:</p> Type Description <code>list</code> <p>Lista de dicion\u00e1rios com os dados transformados, cada um contendo: - moeda_origem: C\u00f3digo da moeda de origem (USD) - moeda_destino: C\u00f3digo da moeda de destino (BRL) - valor_de_compra: Valor de compra do d\u00f3lar em rela\u00e7\u00e3o ao real - timestamp_moeda: Timestamp da cota\u00e7\u00e3o (timezone S\u00e3o Paulo) - timestamp_criacao: Timestamp de cria\u00e7\u00e3o (timezone S\u00e3o Paulo)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; historical_data = [\n...     {\"code\": \"USD\", \"codein\": \"BRL\", \"bid\": \"5.12\", \"timestamp\": \"1640995200\"},\n...     {\"code\": \"USD\", \"codein\": \"BRL\", \"bid\": \"5.15\", \"timestamp\": \"1641081600\"}\n... ]\n</code></pre> Source code in <code>src/pipeline/transform.py</code> <pre><code>def transform_historical_data(data_list):\n    \"\"\"\n    Transforma uma lista de dados hist\u00f3ricos extra\u00eddos da API para o formato padronizado.\n\n    Parameters\n    ----------\n    data_list : list\n        Lista de dicion\u00e1rios contendo dados hist\u00f3ricos extra\u00eddos da API,\n        onde cada dicion\u00e1rio representa uma cota\u00e7\u00e3o do d\u00f3lar.\n\n    Returns\n    -------\n    list\n        Lista de dicion\u00e1rios com os dados transformados, cada um contendo:\n        - moeda_origem: C\u00f3digo da moeda de origem (USD)\n        - moeda_destino: C\u00f3digo da moeda de destino (BRL)\n        - valor_de_compra: Valor de compra do d\u00f3lar em rela\u00e7\u00e3o ao real\n        - timestamp_moeda: Timestamp da cota\u00e7\u00e3o (timezone S\u00e3o Paulo)\n        - timestamp_criacao: Timestamp de cria\u00e7\u00e3o (timezone S\u00e3o Paulo)\n    Examples\n    --------\n    &gt;&gt;&gt; historical_data = [\n    ...     {\"code\": \"USD\", \"codein\": \"BRL\", \"bid\": \"5.12\", \"timestamp\": \"1640995200\"},\n    ...     {\"code\": \"USD\", \"codein\": \"BRL\", \"bid\": \"5.15\", \"timestamp\": \"1641081600\"}\n    ... ]\n    \"\"\"\n    from datetime import UTC, datetime\n    from zoneinfo import ZoneInfo\n\n    transformed = []\n    # Pega code e codein do primeiro item (sempre tem)\n    moeda_origem = data_list[0].get(\"code\", \"USD\")\n    moeda_destino = data_list[0].get(\"codein\", \"BRL\")\n    for data in data_list:\n        valor_de_compra = data[\"bid\"]\n        timestamp_moeda = datetime.fromtimestamp(\n            int(data[\"timestamp\"]), tz=UTC\n        ).astimezone(ZoneInfo(\"America/Sao_Paulo\"))\n        timestamp_criacao = datetime.now(UTC).astimezone(ZoneInfo(\"America/Sao_Paulo\"))\n        transformed.append(\n            {\n                \"moeda_origem\": data.get(\"code\", moeda_origem),\n                \"moeda_destino\": data.get(\"codein\", moeda_destino),\n                \"valor_de_compra\": valor_de_compra,\n                \"timestamp_moeda\": timestamp_moeda,\n                \"timestamp_criacao\": timestamp_criacao,\n            }\n        )\n    return transformed\n</code></pre>"},{"location":"referencia/#src.pipeline.load","title":"<code>src.pipeline.load</code>","text":"<p>M\u00f3dulo respons\u00e1vel pelo carregamento dos dados transformados no banco de dados PostgreSQL.</p> <p>Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para persistir os dados processados no banco de dados, utilizando SQLAlchemy ORM para opera\u00e7\u00f5es de inser\u00e7\u00e3o.</p>"},{"location":"referencia/#src.pipeline.load.save_data_postgres","title":"<code>save_data_postgres(Session, data, logger)</code>","text":"<p>Salva os dados transformados no banco de dados PostgreSQL.</p> <p>Utiliza uma sess\u00e3o do SQLAlchemy para adicionar um novo registro na tabela DolarData. Se ocorrer um erro, a transa\u00e7\u00e3o \u00e9 revertida automaticamente.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <code>Session</code> <p>Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.</p> required <code>data</code> <code>dict</code> <p>Dicion\u00e1rio contendo os dados transformados com as chaves: - moeda_origem: C\u00f3digo da moeda de origem - moeda_destino: C\u00f3digo da moeda de destino - valor_de_compra: Valor de compra - timestamp_moeda: Timestamp da cota\u00e7\u00e3o - timestamp_criacao: Timestamp de cria\u00e7\u00e3o</p> required <code>logger</code> <code>Logger</code> <p>Logger para registrar logs do processo de salvamento.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {\n...     \"moeda_origem\": \"USD\",\n...     \"moeda_destino\": \"BRL\",\n...     \"valor_de_compra\": 5.12,\n...     \"timestamp_moeda\": datetime.now(),\n...     \"timestamp_criacao\": datetime.now()\n... }\n&gt;&gt;&gt; save_data_postgres(Session, data, logger)\n</code></pre> Source code in <code>src/pipeline/load.py</code> <pre><code>def save_data_postgres(Session, data, logger):\n    \"\"\"Salva os dados transformados no banco de dados PostgreSQL.\n\n    Utiliza uma sess\u00e3o do SQLAlchemy para adicionar um novo registro na tabela DolarData.\n    Se ocorrer um erro, a transa\u00e7\u00e3o \u00e9 revertida automaticamente.\n\n    Parameters\n    ----------\n    Session : sqlalchemy.orm.session.Session\n        Classe de sess\u00e3o do SQLAlchemy para interagir com o banco.\n    data : dict\n        Dicion\u00e1rio contendo os dados transformados com as chaves:\n        - moeda_origem: C\u00f3digo da moeda de origem\n        - moeda_destino: C\u00f3digo da moeda de destino\n        - valor_de_compra: Valor de compra\n        - timestamp_moeda: Timestamp da cota\u00e7\u00e3o\n        - timestamp_criacao: Timestamp de cria\u00e7\u00e3o\n    logger : logging.Logger\n        Logger para registrar logs do processo de salvamento.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {\n    ...     \"moeda_origem\": \"USD\",\n    ...     \"moeda_destino\": \"BRL\",\n    ...     \"valor_de_compra\": 5.12,\n    ...     \"timestamp_moeda\": datetime.now(),\n    ...     \"timestamp_criacao\": datetime.now()\n    ... }\n    &gt;&gt;&gt; save_data_postgres(Session, data, logger)\n    \"\"\"\n\n    session = Session()\n    try:\n        novo_registro = DolarData(**data)\n        session.add(novo_registro)\n        session.commit()\n        logger.info(\n            f\"[{data['timestamp_criacao'].strftime('%d/%m/%y %H:%M:%S')}] \"\n            f\"Dados salvos com sucesso no banco de dados PostgreSQL.\"\n        )\n    except Exception as e:\n        logger.error(f\"Erro ao salvar dados no PostgreSQL: {e}\")\n        session.rollback()\n    finally:\n        session.close()\n</code></pre>"},{"location":"referencia/#banco-de-dados","title":"\ud83d\uddc4\ufe0f Banco de Dados","text":""},{"location":"referencia/#src.database.database","title":"<code>src.database.database</code>","text":"<p>M\u00f3dulo de defini\u00e7\u00e3o do modelo de dados e ORM para a tabela dolar_data no banco PostgreSQL.</p> <p>Este m\u00f3dulo define a estrutura da tabela que armazena os dados de cota\u00e7\u00e3o do d\u00f3lar, incluindo campos para moedas, valores e timestamps.</p>"},{"location":"referencia/#src.database.database.DolarData","title":"<code>DolarData</code>","text":"<p>               Bases: <code>Base</code></p> <p>Classe que representa a tabela dolar_data no banco de dados.</p> <p>Esta classe define o modelo ORM para armazenar dados de cota\u00e7\u00e3o do d\u00f3lar, incluindo informa\u00e7\u00f5es sobre moedas, valores de compra e timestamps.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Chave prim\u00e1ria auto-incrementada.</p> <code>moeda_origem</code> <code>str</code> <p>C\u00f3digo da moeda de origem (ex: USD).</p> <code>moeda_destino</code> <code>str</code> <p>C\u00f3digo da moeda de destino (ex: BRL).</p> <code>valor_de_compra</code> <code>float</code> <p>Valor de compra da moeda de origem em rela\u00e7\u00e3o \u00e0 de destino.</p> <code>timestamp_moeda</code> <code>datetime</code> <p>Data e hora da cota\u00e7\u00e3o (com timezone).</p> <code>timestamp_criacao</code> <code>datetime</code> <p>Data e hora de cria\u00e7\u00e3o do registro no sistema (com timezone).</p> Source code in <code>src/database/database.py</code> <pre><code>class DolarData(Base):\n    \"\"\"Classe que representa a tabela dolar_data no banco de dados.\n\n    Esta classe define o modelo ORM para armazenar dados de cota\u00e7\u00e3o do d\u00f3lar,\n    incluindo informa\u00e7\u00f5es sobre moedas, valores de compra e timestamps.\n\n    Attributes\n    ----------\n    id : int\n        Chave prim\u00e1ria auto-incrementada.\n    moeda_origem : str\n        C\u00f3digo da moeda de origem (ex: USD).\n    moeda_destino : str\n        C\u00f3digo da moeda de destino (ex: BRL).\n    valor_de_compra : float\n        Valor de compra da moeda de origem em rela\u00e7\u00e3o \u00e0 de destino.\n    timestamp_moeda : datetime\n        Data e hora da cota\u00e7\u00e3o (com timezone).\n    timestamp_criacao : datetime\n        Data e hora de cria\u00e7\u00e3o do registro no sistema (com timezone).\n    \"\"\"\n\n    __tablename__ = \"dolar_data\"\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    moeda_origem = Column(String(3), nullable=False)\n    moeda_destino = Column(String(3), nullable=False)\n    valor_de_compra = Column(Float, nullable=False)\n    timestamp_moeda = Column(DateTime(timezone=True), nullable=False)\n    timestamp_criacao = Column(DateTime(timezone=True), nullable=False)\n</code></pre>"},{"location":"referencia/#apis-web","title":"\ud83d\udd0c APIs Web","text":""},{"location":"referencia/#src.api.pipeline_web","title":"<code>src.api.pipeline_web</code>","text":"<p>Este m\u00f3dulo define um servi\u00e7o web Flask que executa um pipeline ETL em background. Ele configura o ambiente de logging, a conex\u00e3o com o banco de dados PostgreSQL e inicia o pipeline em uma thread separada. O servi\u00e7o exp\u00f5e um endpoint <code>/health-pipeline</code> para verificar a sa\u00fade do servi\u00e7o.</p>"},{"location":"referencia/#src.api.pipeline_web.health_pipeline","title":"<code>health_pipeline()</code>","text":"<p>Endpoint de sa\u00fade do servi\u00e7o de pipeline. Este endpoint retorna um JSON simples indicando que o servi\u00e7o est\u00e1 ativo e funcionando.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Status do servi\u00e7o em formato JSON.</p> Source code in <code>src/api/pipeline_web.py</code> <pre><code>@app.route(\"/health-pipeline\")\ndef health_pipeline():\n    \"\"\"\n    Endpoint de sa\u00fade do servi\u00e7o de pipeline.\n    Este endpoint retorna um JSON simples indicando que o servi\u00e7o est\u00e1 ativo e funcionando.\n    Returns\n    -------\n    dict\n        Status do servi\u00e7o em formato JSON.\n    \"\"\"\n    return jsonify({\"status\": \"ok\"})\n</code></pre>"},{"location":"referencia/#dashboard","title":"\ud83d\udcca Dashboard","text":"<p>\ud83d\udca1 Dica: Use o menu lateral para navegar rapidamente entre as se\u00e7\u00f5es ou use Ctrl+F para buscar fun\u00e7\u00f5es espec\u00edficas.</p>"},{"location":"referencia/#src.dashboard.dashboard","title":"<code>src.dashboard.dashboard</code>","text":"<p>M\u00f3dulo respons\u00e1vel pelo dashboard Streamlit para visualiza\u00e7\u00e3o dos dados do d\u00f3lar.</p>"},{"location":"referencia/#src.dashboard.dashboard.main","title":"<code>main()</code>","text":"<p>Fun\u00e7\u00e3o principal que configura o dashboard Streamlit e exibe os dados do d\u00f3lar. Configura o layout, t\u00edtulo e descri\u00e7\u00e3o do dashboard, l\u00ea os dados do banco de dados e exibe as informa\u00e7\u00f5es em tabelas e gr\u00e1ficos interativos. Tamb\u00e9m permite ao usu\u00e1rio selecionar diferentes per\u00edodos para visualizar a evolu\u00e7\u00e3o do pre\u00e7o do d\u00f3lar.</p> Source code in <code>src/dashboard/dashboard.py</code> <pre><code>def main():\n    \"\"\"\n    Fun\u00e7\u00e3o principal que configura o dashboard Streamlit e exibe os dados do d\u00f3lar.\n    Configura o layout, t\u00edtulo e descri\u00e7\u00e3o do dashboard, l\u00ea os dados do banco de dados\n    e exibe as informa\u00e7\u00f5es em tabelas e gr\u00e1ficos interativos.\n    Tamb\u00e9m permite ao usu\u00e1rio selecionar diferentes per\u00edodos para visualizar a evolu\u00e7\u00e3o do pre\u00e7o do d\u00f3lar.\n    \"\"\"\n    st.set_page_config(\n        page_title=\"Dashboard de Dados do D\u00f3lar\", page_icon=\":dollar:\", layout=\"wide\"\n    )\n    st.title(\"Dashboard de Pre\u00e7os do D\u00f3lar\")\n    st.write(\n        f\"Este dashboard exibe os pre\u00e7os do d\u00f3lar coletados periodicamente em um banco PostgreSQL.\"\n    )\n\n    df = read_data_from_db()\n\n    if not df.empty:\n        st.subheader(\"Dados do D\u00f3lar recentes\")\n        st.dataframe(df)\n\n        # Converter timestamp para datetime\n        df[\"timestamp_moeda\"] = pd.to_datetime(df[\"timestamp_moeda\"])\n        df = df.sort_values(by=\"timestamp_moeda\")\n\n        # Bot\u00f5es de zoom para o gr\u00e1fico\n        st.subheader(\"Evolu\u00e7\u00e3o do pre\u00e7o do D\u00f3lar\")\n\n        # Criar bot\u00f5es de per\u00edodo\n        col1, col2, col3, col4, col5 = st.columns(5)\n\n        with col1:\n            if st.button(\"\u00daltima Hora\", key=\"hora\"):\n                st.session_state.periodo = \"hora\"\n        with col2:\n            if st.button(\"\u00daltimo Dia\", key=\"dia\"):\n                st.session_state.periodo = \"dia\"\n        with col3:\n            if st.button(\"\u00daltima Semana\", key=\"semana\"):\n                st.session_state.periodo = \"semana\"\n        with col4:\n            if st.button(\"\u00daltimo M\u00eas\", key=\"mes\"):\n                st.session_state.periodo = \"mes\"\n        with col5:\n            if st.button(\"Todos\", key=\"todos\"):\n                st.session_state.periodo = \"todos\"\n\n        # Inicializar per\u00edodo se n\u00e3o existir\n        if \"periodo\" not in st.session_state:\n            st.session_state.periodo = \"todos\"\n\n        # Filtrar dados baseado no per\u00edodo selecionado\n        agora = datetime.datetime.now()\n\n        if st.session_state.periodo == \"hora\":\n            df_filtrado = df[\n                df[\"timestamp_moeda\"] &gt;= agora - datetime.timedelta(hours=1)\n            ]\n            periodo_texto = \"\u00daltima Hora\"\n        elif st.session_state.periodo == \"dia\":\n            df_filtrado = df[\n                df[\"timestamp_moeda\"] &gt;= agora - datetime.timedelta(days=1)\n            ]\n            periodo_texto = \"\u00daltimo Dia\"\n        elif st.session_state.periodo == \"semana\":\n            df_filtrado = df[\n                df[\"timestamp_moeda\"] &gt;= agora - datetime.timedelta(weeks=1)\n            ]\n            periodo_texto = \"\u00daltima Semana\"\n        elif st.session_state.periodo == \"mes\":\n            df_filtrado = df[\n                df[\"timestamp_moeda\"] &gt;= agora - datetime.timedelta(days=30)\n            ]\n            periodo_texto = \"\u00daltimo M\u00eas\"\n        else:  # todos\n            df_filtrado = df\n            periodo_texto = \"Todos os Dados\"\n\n        # Mostrar per\u00edodo selecionado\n        st.write(f\"**Per\u00edodo selecionado:** {periodo_texto}\")\n\n        # Exibir gr\u00e1fico com dados filtrados\n        if not df_filtrado.empty:\n            st.line_chart(\n                data=df_filtrado,\n                x=\"timestamp_moeda\",\n                y=\"valor_de_compra\",\n                use_container_width=True,\n            )\n        else:\n            st.warning(f\"Nenhum dado dispon\u00edvel para o per\u00edodo: {periodo_texto}\")\n\n        # Dados Estat\u00edsticos do dia atual\n        st.subheader(\"Dados Estat\u00edsticos do Dia\")\n        hoje = agora.date()\n        df_dia = df[df[\"timestamp_moeda\"].dt.date == hoje]\n        col1, col2, col3 = st.columns(3)\n        if not df_dia.empty:\n            preco_atual = df_dia[\"valor_de_compra\"].iloc[-1]\n            preco_maximo = df_dia[\"valor_de_compra\"].max()\n            preco_minimo = df_dia[\"valor_de_compra\"].min()\n            col1.metric(\"Pre\u00e7o Atual (hoje)\", f\"R$ {preco_atual:.2f}\")\n            col2.metric(\"Pre\u00e7o M\u00e1ximo (hoje)\", f\"R$ {preco_maximo:.2f}\")\n            col3.metric(\"Pre\u00e7o M\u00ednimo (hoje)\", f\"R$ {preco_minimo:.2f}\")\n        else:\n            col1.metric(\"Pre\u00e7o Atual (hoje)\", \"N/A\")\n            col2.metric(\"Pre\u00e7o M\u00e1ximo (hoje)\", \"N/A\")\n            col3.metric(\"Pre\u00e7o M\u00ednimo (hoje)\", \"N/A\")\n\n        # Dados Estat\u00edsticos do per\u00edodo filtrado\n        st.subheader(f\"Dados Estat\u00edsticos do Per\u00edodo Selecionado: {periodo_texto}\")\n        col4, col5, col6 = st.columns(3)\n        if not df_filtrado.empty:\n            preco_atual_f = df_filtrado[\"valor_de_compra\"].iloc[-1]\n            preco_maximo_f = df_filtrado[\"valor_de_compra\"].max()\n            preco_minimo_f = df_filtrado[\"valor_de_compra\"].min()\n            col4.metric(\"Pre\u00e7o Atual (per\u00edodo)\", f\"R$ {preco_atual_f:.2f}\")\n            col5.metric(\"Pre\u00e7o M\u00e1ximo (per\u00edodo)\", f\"R$ {preco_maximo_f:.2f}\")\n            col6.metric(\"Pre\u00e7o M\u00ednimo (per\u00edodo)\", f\"R$ {preco_minimo_f:.2f}\")\n        else:\n            col4.metric(\"Pre\u00e7o Atual (per\u00edodo)\", \"N/A\")\n            col5.metric(\"Pre\u00e7o M\u00e1ximo (per\u00edodo)\", \"N/A\")\n            col6.metric(\"Pre\u00e7o M\u00ednimo (per\u00edodo)\", \"N/A\")\n    else:\n        st.warning(\"Nenhum dado dispon\u00edvel para exibi\u00e7\u00e3o.\")\n</code></pre>"},{"location":"referencia/#src.dashboard.dashboard.read_data_from_db","title":"<code>read_data_from_db()</code>","text":"<p>L\u00ea os dados do d\u00f3lar armazenados no banco de dados PostgreSQL. Conecta ao banco de dados e executa uma consulta SQL para obter os dados mais recentes sobre a cota\u00e7\u00e3o do d\u00f3lar, incluindo moeda de origem, moeda de destino, valor de compra e timestamp da cota\u00e7\u00e3o.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Um DataFrame do Pandas contendo os dados lidos do banco de dados, com colunas para: - moeda_origem: C\u00f3digo da moeda de origem (ex: USD) - moeda_destino: C\u00f3digo da moeda de destino (ex: BRL) - valor_de_compra: Valor de compra do d\u00f3lar em rela\u00e7\u00e3o ao real - timestamp_moeda: Timestamp da cota\u00e7\u00e3o (com timezone S\u00e3o Paulo)</p> <code>None</code> <p>Se ocorrer um erro ao conectar ao banco de dados ou ao ler os dados, retorna um DataFrame vazio.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>Se ocorrer um erro ao conectar ao banco de dados ou ao ler os dados, exibe uma mensagem de erro no Streamlit.</p> Source code in <code>src/dashboard/dashboard.py</code> <pre><code>def read_data_from_db():\n    \"\"\"\n    L\u00ea os dados do d\u00f3lar armazenados no banco de dados PostgreSQL.\n    Conecta ao banco de dados e executa uma consulta SQL para obter os dados mais recentes\n    sobre a cota\u00e7\u00e3o do d\u00f3lar, incluindo moeda de origem, moeda de destino, valor de compra\n    e timestamp da cota\u00e7\u00e3o.\n\n    Returns\n    -------\n    pd.DataFrame\n        Um DataFrame do Pandas contendo os dados lidos do banco de dados, com colunas para:\n        - moeda_origem: C\u00f3digo da moeda de origem (ex: USD)\n        - moeda_destino: C\u00f3digo da moeda de destino (ex: BRL)\n        - valor_de_compra: Valor de compra do d\u00f3lar em rela\u00e7\u00e3o ao real\n        - timestamp_moeda: Timestamp da cota\u00e7\u00e3o (com timezone S\u00e3o Paulo)\n    None\n        Se ocorrer um erro ao conectar ao banco de dados ou ao ler os dados, retorna um DataFrame vazio.\n\n    Raises\n    ------\n    Exception\n        Se ocorrer um erro ao conectar ao banco de dados ou ao ler os dados, exibe uma mensagem de\n        erro no Streamlit.\n    \"\"\"\n    try:\n        query = \"\"\"\n        SELECT\n            moeda_origem,\n            moeda_destino,\n            valor_de_compra,\n\t\t\ttimestamp_moeda AT TIME ZONE 'America/Sao_Paulo' AS timestamp_moeda\n\t\tFROM dolar_data \n        ORDER BY timestamp_moeda DESC\n        \"\"\"\n        df = pd.read_sql(query, engine)\n        return df\n    except Exception as e:\n        st.error(f\"Erro ao conectar ao banco de dados: {e}\")\n        return pd.DataFrame()\n</code></pre>"}]}